<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nuriggum.code.mapper.CodeMapper">

    <select id="selectCodeList" resultType="com.nuriggum.code.model.Code">
        /* selectCodeList 코드 목록 조회 */
        SELECT *
        FROM CODE_INFO
        <where>
            <if test="data.groupId != null and !data.groupId.equals('')">
                AND LOWER(GROUP_ID) LIKE CONCAT('%', LOWER(#{data.groupId}), '%')
            </if>
            <if test="data.code != null and !data.code.equals('')">
                AND LOWER(CODE) LIKE CONCAT('%', LOWER(#{data.code}), '%')
            </if>
        </where>
        <include refid="paging"></include>
    </select>

    <select id="selectCodeGroupList" resultType="com.nuriggum.code.model.CodeGroup">
        /* selectCodeGroupList 코드 그룹 목록 조회 */
        SELECT *
        FROM CODE_GROUP
        <where>
        <if test="data.groupId != null and !data.groupId.equals('')">
            AND LOWER(GROUP_ID) LIKE CONCAT('%', LOWER(#{data.groupId}), '%')
        </if>
        <if test="data.groupName != null and !data.groupName.equals('')">
            AND LOWER(GROUP_NAME) LIKE CONCAT('%', LOWER(#{data.groupName}), '%')
        </if>
        </where>
        <include refid="paging"></include>
    </select>

    <select id="selectCodeListCount" resultType="int">
        /* selectCodeListCount 코드 목록 카운트 조회 */
        SELECT COUNT(*) AS CNT
        FROM CODE_INFO
        <where>
            <if test="groupId != null and !groupId.equals('')">
                AND LOWER(GROUP_ID) LIKE CONCAT('%', LOWER(#{groupId}), '%')
            </if>
            <if test="code != null and !code.equals('')">
                AND LOWER(CODE) LIKE CONCAT('%', LOWER(#{code}), '%')
            </if>
        </where>
    </select>

    <select id="selectCodeGroupListCount" resultType="int">
        /* selectCodeGroupListCount 코드 그룹 목록 카운트 조회 */
        SELECT COUNT(*) AS CNT
        FROM CODE_GROUP
        <where>
            <if test="groupId != null and !groupId.equals('')">
                AND LOWER(GROUP_ID) LIKE CONCAT('%', LOWER(#{groupId}), '%')
            </if>
            <if test="groupName != null and !groupName.equals('')">
                AND LOWER(GROUP_NAME) LIKE CONCAT('%', LOWER(#{groupName}), '%')
            </if>
        </where>
    </select>

    <select id="selectCodeDuplicate" resultType="boolean">
        /* selectCodeDuplicate 코드 중복 조회 */
        SELECT case when COUNT(*) > 0 then true else false end
        FROM CODE_INFO
        <where>
            <if test="groupId != null and !groupId.equals('')">
                AND GROUP_ID = #{groupId}
            </if>
            <if test="code != null and !code.equals('')">
                AND CODE = #{code}
            </if>
        </where>
    </select>

    <select id="selectCodeGroupDuplicate" resultType="boolean">
        /* selectCodeGroupDuplicate 코드 그룹 중복 조회 */
        SELECT case when COUNT(*) > 0 then true else false end
        FROM CODE_GROUP
        <where>
            <if test="groupId != null and !groupId.equals('')">
                AND GROUP_ID = #{groupId}
            </if>
        </where>
    </select>

    <insert id="insertCode">
        /* insertCode 코드 신규 등록 */
        INSERT INTO CODE_INFO
        (
            GROUP_ID
            ,CODE
            ,CODE_NAME
            ,USE_YN
            ,SORT_NUMBER
            ,REGIST_DATE
            ,REGIST_USER_ID
            ,CHANGE_DATE
            ,CHANGE_USER_ID
            ,ATTRIBUTE1
            ,ATTRIBUTE2
            ,ATTRIBUTE3
            ,ATTRIBUTE4
            ,ATTRIBUTE5
            ,ATTRIBUTE6
            ,ATTRIBUTE7
            ,ATTRIBUTE8
            ,ATTRIBUTE9
        ) VALUES (
            #{groupId}
            ,#{code}
            ,#{codeName}
            ,#{useYn}
            ,#{sortNumber}
            ,now()
            ,#{registUserId}
            ,now()
            ,#{changeUserId}
            ,#{attribute1}
            ,#{attribute2}
            ,#{attribute3}
            ,#{attribute4}
            ,#{attribute5}
            ,#{attribute6}
            ,#{attribute7}
            ,#{attribute8}
            ,#{attribute9}
         )
    </insert>

    <insert id="insertCodeGroup">
        /* insertCodeGroup 코드 그룹 신규 등록 */
        INSERT INTO CODE_GROUP
        (
            GROUP_ID
            ,GROUP_NAME
            ,USE_YN
            ,REGIST_DATE
            ,REGIST_USER_ID
            ,CHANGE_DATE
            ,CHANGE_USER_ID
            ,ATTRIBUTE1
            ,ATTRIBUTE2
            ,ATTRIBUTE3
            ,ATTRIBUTE4
            ,ATTRIBUTE5
            ,ATTRIBUTE6
            ,ATTRIBUTE7
            ,ATTRIBUTE8
            ,ATTRIBUTE9
        ) VALUES (
            #{groupId}
            ,#{groupName}
            ,#{useYn}
            ,now()
            ,#{registUserId}
            ,now()
            ,#{changeUserId}
            ,#{attribute1}
            ,#{attribute2}
            ,#{attribute3}
            ,#{attribute4}
            ,#{attribute5}
            ,#{attribute6}
            ,#{attribute7}
            ,#{attribute8}
            ,#{attribute9}
        )
    </insert>

    <update id="updateCodeGroup">
        /* updateCodeGroup 코드 그룹 수정 */
        UPDATE CODE_GROUP
            SET GROUP_NAME = #{groupName}
            ,USE_YN = #{useYn}
            ,ATTRIBUTE1 = {attibute1}
            ,ATTRIBUTE2 = {attibute2}
            ,ATTRIBUTE3 = {attibute3}
            ,ATTRIBUTE4 = {attibute4}
            ,ATTRIBUTE5 = {attibute5}
            ,ATTRIBUTE6 = {attibute6}
            ,ATTRIBUTE7 = {attibute7}
            ,ATTRIBUTE8 = {attibute8}
            ,ATTRIBUTE9 = {attibute9}
            ,CHANGE_USER_ID = #{changeUserId}
            ,CHANGE_DATE = now()
        WHERE GROUP_ID = #{groupId}
    </update>

    <sql id="paging">
        <if test="pageable.sort.sorted">
            <trim prefix="ORDER BY">
                <foreach item="order" index="i" collection="pageable.sort" separator=", ">
                    ${order.property} ${order.direction}
                </foreach>
            </trim>
        </if>
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </sql>
</mapper>